# type: ignore
# File interfaces with autogenerated code with insufficient type information, so disabled here.

from typing import Dict

from web.services.lims.lims import Lims
from web.services.lims.models import Connection, Isolate
from web.services.lims.openapi import (
    ApiClient,
    Configuration,
    IsolateApi,
    ConnectionsApi,
    IsolateGetRequest,
    IsolateGetResponse,
    IsolateUpdateRequest,
    ConnectionCreateRequest,
)


class LimsApi(Lims):
    """Implementation of the LIMS service using auto generated API client"""

    def __init__(self, base_path: str):
        client_config = Configuration(host=base_path)
        client = ApiClient(client_config)
        self.__isolate_api = IsolateApi(client)
        self.__connections_api = ConnectionsApi(client)

    def get_isolate(self, isolate_id: str) -> Isolate:
        response = self.__isolate_api.post_actions_get_isolate(
            isolate_get_request=IsolateGetRequest(isolate_id)
        )
        return self.__map_get_isolate_response(response)

    def update_isolate(self, isolate_id: str, isolate_update: Dict[str, str]) -> bool:
        update_request = self.__map_update_isolate_request(isolate_id, isolate_update)
        _, ret, _ = self.__isolate_api.post_actions_update_isolate_with_http_info(
            isolate_update_request=update_request
        )
        return ret == 200

    def add_connection(self, connection: Connection) -> str:
        response = self.__connections_api.post_connections(
            connection_create_request=ConnectionCreateRequest(
                username=connection.user,
                password=connection.password,
                databaseid=connection.database_id,
            )
        )
        return response.connections.connectionid

    def delete_connection(self, connection_id: str) -> bool:
        _, ret, _ = self.__connections_api.delete_connections_with_http_info(
            connection_id
        )
        return ret == 200

    def refresh_connection(self, connection_id: str) -> bool:
        _, ret, _ = self.__connections_api.put_connections_with_http_info(
            connection_id, body={}
        )
        return ret == 200

    def check_connection(self, connection_id: str) -> bool:
        _, ret, _ = self.__connections_api.get_connections_with_http_info(connection_id)
        return ret == 200

    @staticmethod
    def __map_get_isolate_response(response: IsolateGetResponse) -> Isolate:
        return Isolate(
            id=response.output.sapresponse.isolate_id,
            approved=response.output.sapresponse.isolate_approved,
            meta_data={
                x.meta_field_name: x.meta_field_value
                for x in response.output.sapresponse.metadata
            },
            data={
                x.field_name: x.field_value for x in response.output.sapresponse.data
            },
        )

    @staticmethod
    def __map_update_isolate_request(
        isolate_id: str, isolate_update: Dict[str, str]
    ) -> IsolateUpdateRequest:
        return IsolateUpdateRequest(
            isolate_id=isolate_id,
            data=[
                {"fieldName": key, "fieldValue": value}
                for (key, value) in isolate_update.items()
            ],
        )


if __name__ == "__main__":
    lims = LimsApi("http://localhost:4010/lims")

    db_id = lims.add_connection(
        Connection(user="admin", password="admin", database_id="db1")
    )
    print(db_id)
    print(lims.check_connection(db_id))
    print(lims.refresh_connection(db_id))
    print(lims.get_isolate("abcx"))
    print(lims.update_isolate("abcx", {"field1": "value1"}))
    print(lims.delete_connection(db_id))
