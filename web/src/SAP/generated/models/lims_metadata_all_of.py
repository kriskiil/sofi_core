# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from .base_model_ import Model
from .. import util


class LimsMetadataAllOf(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, chr_number=None, aut_number=None, product_type=None, product=None, origin_country=None, animal_species=None, sample_info=None):  # noqa: E501
        """LimsMetadataAllOf - a model defined in OpenAPI

        :param chr_number: The chr_number of this LimsMetadataAllOf.  # noqa: E501
        :type chr_number: float
        :param aut_number: The aut_number of this LimsMetadataAllOf.  # noqa: E501
        :type aut_number: str
        :param product_type: The product_type of this LimsMetadataAllOf.  # noqa: E501
        :type product_type: str
        :param product: The product of this LimsMetadataAllOf.  # noqa: E501
        :type product: str
        :param origin_country: The origin_country of this LimsMetadataAllOf.  # noqa: E501
        :type origin_country: str
        :param animal_species: The animal_species of this LimsMetadataAllOf.  # noqa: E501
        :type animal_species: str
        :param sample_info: The sample_info of this LimsMetadataAllOf.  # noqa: E501
        :type sample_info: str
        """
        self.openapi_types = {
            'chr_number': float,
            'aut_number': str,
            'product_type': str,
            'product': str,
            'origin_country': str,
            'animal_species': str,
            'sample_info': str
        }

        self.attribute_map = {
            'chr_number': 'chr_number',
            'aut_number': 'aut_number',
            'product_type': 'product_type',
            'product': 'product',
            'origin_country': 'origin_country',
            'animal_species': 'animal_species',
            'sample_info': 'sample_info'
        }

        self._chr_number = chr_number
        self._aut_number = aut_number
        self._product_type = product_type
        self._product = product
        self._origin_country = origin_country
        self._animal_species = animal_species
        self._sample_info = sample_info

    @classmethod
    def from_dict(cls, dikt) -> 'LimsMetadataAllOf':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The LimsMetadata_allOf of this LimsMetadataAllOf.  # noqa: E501
        :rtype: LimsMetadataAllOf
        """
        return util.deserialize_model(dikt, cls)

    @property
    def chr_number(self):
        """Gets the chr_number of this LimsMetadataAllOf.


        :return: The chr_number of this LimsMetadataAllOf.
        :rtype: float
        """
        return self._chr_number

    @chr_number.setter
    def chr_number(self, chr_number):
        """Sets the chr_number of this LimsMetadataAllOf.


        :param chr_number: The chr_number of this LimsMetadataAllOf.
        :type chr_number: float
        """

        self._chr_number = chr_number

    @property
    def aut_number(self):
        """Gets the aut_number of this LimsMetadataAllOf.


        :return: The aut_number of this LimsMetadataAllOf.
        :rtype: str
        """
        return self._aut_number

    @aut_number.setter
    def aut_number(self, aut_number):
        """Sets the aut_number of this LimsMetadataAllOf.


        :param aut_number: The aut_number of this LimsMetadataAllOf.
        :type aut_number: str
        """

        self._aut_number = aut_number

    @property
    def product_type(self):
        """Gets the product_type of this LimsMetadataAllOf.


        :return: The product_type of this LimsMetadataAllOf.
        :rtype: str
        """
        return self._product_type

    @product_type.setter
    def product_type(self, product_type):
        """Sets the product_type of this LimsMetadataAllOf.


        :param product_type: The product_type of this LimsMetadataAllOf.
        :type product_type: str
        """

        self._product_type = product_type

    @property
    def product(self):
        """Gets the product of this LimsMetadataAllOf.


        :return: The product of this LimsMetadataAllOf.
        :rtype: str
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this LimsMetadataAllOf.


        :param product: The product of this LimsMetadataAllOf.
        :type product: str
        """

        self._product = product

    @property
    def origin_country(self):
        """Gets the origin_country of this LimsMetadataAllOf.


        :return: The origin_country of this LimsMetadataAllOf.
        :rtype: str
        """
        return self._origin_country

    @origin_country.setter
    def origin_country(self, origin_country):
        """Sets the origin_country of this LimsMetadataAllOf.


        :param origin_country: The origin_country of this LimsMetadataAllOf.
        :type origin_country: str
        """

        self._origin_country = origin_country

    @property
    def animal_species(self):
        """Gets the animal_species of this LimsMetadataAllOf.


        :return: The animal_species of this LimsMetadataAllOf.
        :rtype: str
        """
        return self._animal_species

    @animal_species.setter
    def animal_species(self, animal_species):
        """Sets the animal_species of this LimsMetadataAllOf.


        :param animal_species: The animal_species of this LimsMetadataAllOf.
        :type animal_species: str
        """

        self._animal_species = animal_species

    @property
    def sample_info(self):
        """Gets the sample_info of this LimsMetadataAllOf.


        :return: The sample_info of this LimsMetadataAllOf.
        :rtype: str
        """
        return self._sample_info

    @sample_info.setter
    def sample_info(self, sample_info):
        """Sets the sample_info of this LimsMetadataAllOf.


        :param sample_info: The sample_info of this LimsMetadataAllOf.
        :type sample_info: str
        """

        self._sample_info = sample_info
