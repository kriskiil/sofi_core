# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from web.src.SAP.generated.models.base_model_ import Model
from web.src.SAP.generated.models.exception import Exception
from web.src.SAP.generated.models.health_status import HealthStatus
from web.src.SAP.generated import util

from web.src.SAP.generated.models.exception import Exception  # noqa: E501
from web.src.SAP.generated.models.health_status import HealthStatus  # noqa: E501

class HealthResponse(Model):



    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
    Do not edit the class manually.
    """

    def __init__(self, data=None, description=None, exception=None, status=None):  # noqa: E501
        """HealthResponse - a model defined in OpenAPI

        :param data: The data of this HealthResponse.  # noqa: E501
        :type data: object
        :param description: The description of this HealthResponse.  # noqa: E501
        :type description: str
        :param exception: The exception of this HealthResponse.  # noqa: E501
        :type exception: Exception
        :param status: The status of this HealthResponse.  # noqa: E501
        :type status: HealthStatus
        """
        self.openapi_types = {
            'data': object,
            'description': str,
            'exception': Exception,
            'status': HealthStatus,
        }

        self.attribute_map = {
            'data': 'data',
            'description': 'description',
            'exception': 'exception',
            'status': 'status',
        }

        self._data = data
        self._description = description
        self._exception = exception
        self._status = status

    @classmethod
    def from_dict(cls, dikt):
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The HealthResponse of this HealthResponse.  # noqa: E501
        :rtype: HealthResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data(self):
        """Gets the data of this HealthResponse.


        :return: The data of this HealthResponse.
        :rtype: object
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this HealthResponse.


        :param data: The data of this HealthResponse.
        :type data: object
        """

        self._data = data

    @property
    def description(self):
        """Gets the description of this HealthResponse.


        :return: The description of this HealthResponse.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this HealthResponse.


        :param description: The description of this HealthResponse.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def exception(self):
        """Gets the exception of this HealthResponse.


        :return: The exception of this HealthResponse.
        :rtype: Exception
        """
        return self._exception

    @exception.setter
    def exception(self, exception):
        """Sets the exception of this HealthResponse.


        :param exception: The exception of this HealthResponse.
        :type exception: Exception
        """

        self._exception = exception

    @property
    def status(self):
        """Gets the status of this HealthResponse.


        :return: The status of this HealthResponse.
        :rtype: HealthStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this HealthResponse.


        :param status: The status of this HealthResponse.
        :type status: HealthStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status
