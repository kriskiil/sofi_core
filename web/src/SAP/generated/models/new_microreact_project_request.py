# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from web.src.SAP.generated.models.base_model_ import Model
from web.src.SAP.generated import util


class NewMicroreactProjectRequest(Model):



    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
    Do not edit the class manually.
    """

    def __init__(self, workspace=None, mr_access_token=None):  # noqa: E501
        """NewMicroreactProjectRequest - a model defined in OpenAPI

        :param workspace: The workspace of this NewMicroreactProjectRequest.  # noqa: E501
        :type workspace: str
        :param mr_access_token: The mr_access_token of this NewMicroreactProjectRequest.  # noqa: E501
        :type mr_access_token: str
        """
        self.openapi_types = {
            'workspace': str,
            'mr_access_token': str,
        }

        self.attribute_map = {
            'workspace': 'workspace',
            'mr_access_token': 'mr_access_token',
        }

        self._workspace = workspace
        self._mr_access_token = mr_access_token

    @classmethod
    def from_dict(cls, dikt):
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NewMicroreactProjectRequest of this NewMicroreactProjectRequest.  # noqa: E501
        :rtype: NewMicroreactProjectRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def workspace(self):
        """Gets the workspace of this NewMicroreactProjectRequest.


        :return: The workspace of this NewMicroreactProjectRequest.
        :rtype: str
        """
        return self._workspace

    @workspace.setter
    def workspace(self, workspace):
        """Sets the workspace of this NewMicroreactProjectRequest.


        :param workspace: The workspace of this NewMicroreactProjectRequest.
        :type workspace: str
        """
        if workspace is None:
            raise ValueError("Invalid value for `workspace`, must not be `None`")  # noqa: E501

        self._workspace = workspace

    @property
    def mr_access_token(self):
        """Gets the mr_access_token of this NewMicroreactProjectRequest.


        :return: The mr_access_token of this NewMicroreactProjectRequest.
        :rtype: str
        """
        return self._mr_access_token

    @mr_access_token.setter
    def mr_access_token(self, mr_access_token):
        """Sets the mr_access_token of this NewMicroreactProjectRequest.


        :param mr_access_token: The mr_access_token of this NewMicroreactProjectRequest.
        :type mr_access_token: str
        """
        if mr_access_token is None:
            raise ValueError("Invalid value for `mr_access_token`, must not be `None`")  # noqa: E501

        self._mr_access_token = mr_access_token
