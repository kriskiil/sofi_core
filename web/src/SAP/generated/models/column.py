# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from .base_model_ import Model
from .. import util


class Column(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, approvable=None, editable=None, pii=None, organization=None, field_name=None, approves_with=None):  # noqa: E501
        """Column - a model defined in OpenAPI

        :param approvable: The approvable of this Column.  # noqa: E501
        :type approvable: bool
        :param editable: The editable of this Column.  # noqa: E501
        :type editable: bool
        :param pii: The pii of this Column.  # noqa: E501
        :type pii: bool
        :param organization: The organization of this Column.  # noqa: E501
        :type organization: str
        :param field_name: The field_name of this Column.  # noqa: E501
        :type field_name: str
        :param approves_with: The approves_with of this Column.  # noqa: E501
        :type approves_with: List[str]
        """
        self.openapi_types = {
            'approvable': bool,
            'editable': bool,
            'pii': bool,
            'organization': str,
            'field_name': str,
            'approves_with': List[str]
        }

        self.attribute_map = {
            'approvable': 'approvable',
            'editable': 'editable',
            'pii': 'pii',
            'organization': 'organization',
            'field_name': 'field_name',
            'approves_with': 'approves_with'
        }

        self._approvable = approvable
        self._editable = editable
        self._pii = pii
        self._organization = organization
        self._field_name = field_name
        self._approves_with = approves_with

    @classmethod
    def from_dict(cls, dikt) -> 'Column':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Column of this Column.  # noqa: E501
        :rtype: Column
        """
        return util.deserialize_model(dikt, cls)

    @property
    def approvable(self):
        """Gets the approvable of this Column.


        :return: The approvable of this Column.
        :rtype: bool
        """
        return self._approvable

    @approvable.setter
    def approvable(self, approvable):
        """Sets the approvable of this Column.


        :param approvable: The approvable of this Column.
        :type approvable: bool
        """

        self._approvable = approvable

    @property
    def editable(self):
        """Gets the editable of this Column.


        :return: The editable of this Column.
        :rtype: bool
        """
        return self._editable

    @editable.setter
    def editable(self, editable):
        """Sets the editable of this Column.


        :param editable: The editable of this Column.
        :type editable: bool
        """

        self._editable = editable

    @property
    def pii(self):
        """Gets the pii of this Column.


        :return: The pii of this Column.
        :rtype: bool
        """
        return self._pii

    @pii.setter
    def pii(self, pii):
        """Sets the pii of this Column.


        :param pii: The pii of this Column.
        :type pii: bool
        """

        self._pii = pii

    @property
    def organization(self):
        """Gets the organization of this Column.


        :return: The organization of this Column.
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this Column.


        :param organization: The organization of this Column.
        :type organization: str
        """

        self._organization = organization

    @property
    def field_name(self):
        """Gets the field_name of this Column.


        :return: The field_name of this Column.
        :rtype: str
        """
        return self._field_name

    @field_name.setter
    def field_name(self, field_name):
        """Sets the field_name of this Column.


        :param field_name: The field_name of this Column.
        :type field_name: str
        """

        self._field_name = field_name

    @property
    def approves_with(self):
        """Gets the approves_with of this Column.


        :return: The approves_with of this Column.
        :rtype: List[str]
        """
        return self._approves_with

    @approves_with.setter
    def approves_with(self, approves_with):
        """Sets the approves_with of this Column.


        :param approves_with: The approves_with of this Column.
        :type approves_with: List[str]
        """

        self._approves_with = approves_with
