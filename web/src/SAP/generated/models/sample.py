# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from web.src.SAP.generated.models.base_model_ import Model
from web.src.SAP.generated.models.sample_categories import SampleCategories
from web.src.SAP.generated import util

from web.src.SAP.generated.models.sample_categories import SampleCategories  # noqa: E501

class Sample(Model):



    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
    Do not edit the class manually.
    """

    def __init__(self, name=None, categories=None):  # noqa: E501
        """Sample - a model defined in OpenAPI

        :param name: The name of this Sample.  # noqa: E501
        :type name: str
        :param categories: The categories of this Sample.  # noqa: E501
        :type categories: SampleCategories
        """
        self.openapi_types = {
            'name': str,
            'categories': SampleCategories,
        }

        self.attribute_map = {
            'name': 'name',
            'categories': 'categories',
        }

        self._name = name
        self._categories = categories

    @classmethod
    def from_dict(cls, dikt):
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Sample of this Sample.  # noqa: E501
        :rtype: Sample
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this Sample.


        :return: The name of this Sample.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Sample.


        :param name: The name of this Sample.
        :type name: str
        """

        self._name = name

    @property
    def categories(self):
        """Gets the categories of this Sample.


        :return: The categories of this Sample.
        :rtype: SampleCategories
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this Sample.


        :param categories: The categories of this Sample.
        :type categories: SampleCategories
        """

        self._categories = categories
