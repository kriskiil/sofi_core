# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from .base_model_ import Model
from .. import util


class AnalysisResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, isolate_id=None, qc_provided_species=None, qc_genome1x=None, qc_genome10x=None, qc_gsize_diff1x10=None, qc_avg_coverage=None):  # noqa: E501
        """AnalysisResult - a model defined in OpenAPI

        :param id: The id of this AnalysisResult.  # noqa: E501
        :type id: str
        :param isolate_id: The isolate_id of this AnalysisResult.  # noqa: E501
        :type isolate_id: str
        :param qc_provided_species: The qc_provided_species of this AnalysisResult.  # noqa: E501
        :type qc_provided_species: float
        :param qc_genome1x: The qc_genome1x of this AnalysisResult.  # noqa: E501
        :type qc_genome1x: float
        :param qc_genome10x: The qc_genome10x of this AnalysisResult.  # noqa: E501
        :type qc_genome10x: float
        :param qc_gsize_diff1x10: The qc_gsize_diff1x10 of this AnalysisResult.  # noqa: E501
        :type qc_gsize_diff1x10: float
        :param qc_avg_coverage: The qc_avg_coverage of this AnalysisResult.  # noqa: E501
        :type qc_avg_coverage: float
        """
        self.openapi_types = {
            'id': str,
            'isolate_id': str,
            'qc_provided_species': float,
            'qc_genome1x': float,
            'qc_genome10x': float,
            'qc_gsize_diff1x10': float,
            'qc_avg_coverage': float
        }

        self.attribute_map = {
            'id': '_id',
            'isolate_id': 'isolateId',
            'qc_provided_species': 'QC_provided_species',
            'qc_genome1x': 'QC_genome1x',
            'qc_genome10x': 'QC_genome10x',
            'qc_gsize_diff1x10': 'QC_Gsize_diff1x10',
            'qc_avg_coverage': 'QC_Avg_coverage'
        }

        self._id = id
        self._isolate_id = isolate_id
        self._qc_provided_species = qc_provided_species
        self._qc_genome1x = qc_genome1x
        self._qc_genome10x = qc_genome10x
        self._qc_gsize_diff1x10 = qc_gsize_diff1x10
        self._qc_avg_coverage = qc_avg_coverage

    @classmethod
    def from_dict(cls, dikt) -> 'AnalysisResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AnalysisResult of this AnalysisResult.  # noqa: E501
        :rtype: AnalysisResult
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this AnalysisResult.


        :return: The id of this AnalysisResult.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AnalysisResult.


        :param id: The id of this AnalysisResult.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def isolate_id(self):
        """Gets the isolate_id of this AnalysisResult.


        :return: The isolate_id of this AnalysisResult.
        :rtype: str
        """
        return self._isolate_id

    @isolate_id.setter
    def isolate_id(self, isolate_id):
        """Sets the isolate_id of this AnalysisResult.


        :param isolate_id: The isolate_id of this AnalysisResult.
        :type isolate_id: str
        """
        if isolate_id is None:
            raise ValueError("Invalid value for `isolate_id`, must not be `None`")  # noqa: E501
        if isolate_id is not None and len(isolate_id) > 100:
            raise ValueError("Invalid value for `isolate_id`, length must be less than or equal to `100`")  # noqa: E501

        self._isolate_id = isolate_id

    @property
    def qc_provided_species(self):
        """Gets the qc_provided_species of this AnalysisResult.


        :return: The qc_provided_species of this AnalysisResult.
        :rtype: float
        """
        return self._qc_provided_species

    @qc_provided_species.setter
    def qc_provided_species(self, qc_provided_species):
        """Sets the qc_provided_species of this AnalysisResult.


        :param qc_provided_species: The qc_provided_species of this AnalysisResult.
        :type qc_provided_species: float
        """

        self._qc_provided_species = qc_provided_species

    @property
    def qc_genome1x(self):
        """Gets the qc_genome1x of this AnalysisResult.


        :return: The qc_genome1x of this AnalysisResult.
        :rtype: float
        """
        return self._qc_genome1x

    @qc_genome1x.setter
    def qc_genome1x(self, qc_genome1x):
        """Sets the qc_genome1x of this AnalysisResult.


        :param qc_genome1x: The qc_genome1x of this AnalysisResult.
        :type qc_genome1x: float
        """

        self._qc_genome1x = qc_genome1x

    @property
    def qc_genome10x(self):
        """Gets the qc_genome10x of this AnalysisResult.


        :return: The qc_genome10x of this AnalysisResult.
        :rtype: float
        """
        return self._qc_genome10x

    @qc_genome10x.setter
    def qc_genome10x(self, qc_genome10x):
        """Sets the qc_genome10x of this AnalysisResult.


        :param qc_genome10x: The qc_genome10x of this AnalysisResult.
        :type qc_genome10x: float
        """

        self._qc_genome10x = qc_genome10x

    @property
    def qc_gsize_diff1x10(self):
        """Gets the qc_gsize_diff1x10 of this AnalysisResult.


        :return: The qc_gsize_diff1x10 of this AnalysisResult.
        :rtype: float
        """
        return self._qc_gsize_diff1x10

    @qc_gsize_diff1x10.setter
    def qc_gsize_diff1x10(self, qc_gsize_diff1x10):
        """Sets the qc_gsize_diff1x10 of this AnalysisResult.


        :param qc_gsize_diff1x10: The qc_gsize_diff1x10 of this AnalysisResult.
        :type qc_gsize_diff1x10: float
        """

        self._qc_gsize_diff1x10 = qc_gsize_diff1x10

    @property
    def qc_avg_coverage(self):
        """Gets the qc_avg_coverage of this AnalysisResult.


        :return: The qc_avg_coverage of this AnalysisResult.
        :rtype: float
        """
        return self._qc_avg_coverage

    @qc_avg_coverage.setter
    def qc_avg_coverage(self, qc_avg_coverage):
        """Sets the qc_avg_coverage of this AnalysisResult.


        :param qc_avg_coverage: The qc_avg_coverage of this AnalysisResult.
        :type qc_avg_coverage: float
        """

        self._qc_avg_coverage = qc_avg_coverage
