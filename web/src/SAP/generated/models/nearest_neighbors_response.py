# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from web.src.SAP.generated.models.base_model_ import Model
from web.src.SAP.generated.models.analysis_result import AnalysisResult
from web.src.SAP.generated.models.bio_api_status import BioApiStatus
from web.src.SAP.generated import util

from web.src.SAP.generated.models.analysis_result import AnalysisResult  # noqa: E501
from web.src.SAP.generated.models.bio_api_status import BioApiStatus  # noqa: E501

class NearestNeighborsResponse(Model):



    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
    Do not edit the class manually.
    """

    def __init__(self, job_id=None, created_at=None, status=None, result=None):  # noqa: E501
        """NearestNeighborsResponse - a model defined in OpenAPI

        :param job_id: The job_id of this NearestNeighborsResponse.  # noqa: E501
        :type job_id: str
        :param created_at: The created_at of this NearestNeighborsResponse.  # noqa: E501
        :type created_at: str
        :param status: The status of this NearestNeighborsResponse.  # noqa: E501
        :type status: BioApiStatus
        :param result: The result of this NearestNeighborsResponse.  # noqa: E501
        :type result: List[AnalysisResult]
        """
        self.openapi_types = {
            'job_id': str,
            'created_at': str,
            'status': BioApiStatus,
            'result': List[AnalysisResult],
        }

        self.attribute_map = {
            'job_id': 'jobId',
            'created_at': 'createdAt',
            'status': 'status',
            'result': 'result',
        }

        self._job_id = job_id
        self._created_at = created_at
        self._status = status
        self._result = result

    @classmethod
    def from_dict(cls, dikt):
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NearestNeighborsResponse of this NearestNeighborsResponse.  # noqa: E501
        :rtype: NearestNeighborsResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def job_id(self):
        """Gets the job_id of this NearestNeighborsResponse.


        :return: The job_id of this NearestNeighborsResponse.
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this NearestNeighborsResponse.


        :param job_id: The job_id of this NearestNeighborsResponse.
        :type job_id: str
        """

        self._job_id = job_id

    @property
    def created_at(self):
        """Gets the created_at of this NearestNeighborsResponse.


        :return: The created_at of this NearestNeighborsResponse.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this NearestNeighborsResponse.


        :param created_at: The created_at of this NearestNeighborsResponse.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def status(self):
        """Gets the status of this NearestNeighborsResponse.


        :return: The status of this NearestNeighborsResponse.
        :rtype: BioApiStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this NearestNeighborsResponse.


        :param status: The status of this NearestNeighborsResponse.
        :type status: BioApiStatus
        """

        self._status = status

    @property
    def result(self):
        """Gets the result of this NearestNeighborsResponse.


        :return: The result of this NearestNeighborsResponse.
        :rtype: List[AnalysisResult]
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this NearestNeighborsResponse.


        :param result: The result of this NearestNeighborsResponse.
        :type result: List[AnalysisResult]
        """

        self._result = result
