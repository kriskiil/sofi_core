# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from web.src.SAP.generated.models.base_model_ import Model
from web.src.SAP.generated import util


class TreeCalc(Model):



    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
    Do not edit the class manually.
    """

    def __init__(self, method=None, result=None):  # noqa: E501
        """TreeCalc - a model defined in OpenAPI

        :param method: The method of this TreeCalc.  # noqa: E501
        :type method: str
        :param result: The result of this TreeCalc.  # noqa: E501
        :type result: str
        """
        self.openapi_types = {
            'method': str,
            'result': str,
        }

        self.attribute_map = {
            'method': 'method',
            'result': 'result',
        }

        self._method = method
        self._result = result

    @classmethod
    def from_dict(cls, dikt):
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The TreeCalc of this TreeCalc.  # noqa: E501
        :rtype: TreeCalc
        """
        return util.deserialize_model(dikt, cls)

    @property
    def method(self):
        """Gets the method of this TreeCalc.


        :return: The method of this TreeCalc.
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this TreeCalc.


        :param method: The method of this TreeCalc.
        :type method: str
        """
        if method is None:
            raise ValueError("Invalid value for `method`, must not be `None`")  # noqa: E501

        self._method = method

    @property
    def result(self):
        """Gets the result of this TreeCalc.


        :return: The result of this TreeCalc.
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this TreeCalc.


        :param result: The result of this TreeCalc.
        :type result: str
        """
        if result is None:
            raise ValueError("Invalid value for `result`, must not be `None`")  # noqa: E501

        self._result = result
