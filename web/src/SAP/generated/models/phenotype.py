# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from web.src.SAP.generated.models.base_model_ import Model
from web.src.SAP.generated.models.gene import Gene
from web.src.SAP.generated import util

from web.src.SAP.generated.models.gene import Gene  # noqa: E501

class Phenotype(Model):



    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
    Do not edit the class manually.
    """

    def __init__(self, amr_classes=None, genes=None):  # noqa: E501
        """Phenotype - a model defined in OpenAPI

        :param amr_classes: The amr_classes of this Phenotype.  # noqa: E501
        :type amr_classes: List[str]
        :param genes: The genes of this Phenotype.  # noqa: E501
        :type genes: Dict[str, Gene]
        """
        self.openapi_types = {
            'amr_classes': List[str],
            'genes': Dict[str, Gene],
        }

        self.attribute_map = {
            'amr_classes': 'amr_classes',
            'genes': 'genes',
        }

        self._amr_classes = amr_classes
        self._genes = genes

    @classmethod
    def from_dict(cls, dikt):
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Phenotype of this Phenotype.  # noqa: E501
        :rtype: Phenotype
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amr_classes(self):
        """Gets the amr_classes of this Phenotype.


        :return: The amr_classes of this Phenotype.
        :rtype: List[str]
        """
        return self._amr_classes

    @amr_classes.setter
    def amr_classes(self, amr_classes):
        """Sets the amr_classes of this Phenotype.


        :param amr_classes: The amr_classes of this Phenotype.
        :type amr_classes: List[str]
        """

        self._amr_classes = amr_classes

    @property
    def genes(self):
        """Gets the genes of this Phenotype.


        :return: The genes of this Phenotype.
        :rtype: Dict[str, Gene]
        """
        return self._genes

    @genes.setter
    def genes(self, genes):
        """Sets the genes of this Phenotype.


        :param genes: The genes of this Phenotype.
        :type genes: Dict[str, Gene]
        """

        self._genes = genes
