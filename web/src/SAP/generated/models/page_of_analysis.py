# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from .base_model_ import Model
from web.src.SAP.generated.models.analysis_result import AnalysisResult
from web.src.SAP.generated.models.approval_status import ApprovalStatus
from .. import util

from web.src.SAP.generated.models.analysis_result import AnalysisResult  # noqa: E501
from web.src.SAP.generated.models.approval_status import ApprovalStatus  # noqa: E501

class PageOfAnalysis(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, paging_token=None, total_count=None, items=None, approval_matrix=None):  # noqa: E501
        """PageOfAnalysis - a model defined in OpenAPI

        :param paging_token: The paging_token of this PageOfAnalysis.  # noqa: E501
        :type paging_token: str
        :param total_count: The total_count of this PageOfAnalysis.  # noqa: E501
        :type total_count: int
        :param items: The items of this PageOfAnalysis.  # noqa: E501
        :type items: List[AnalysisResult]
        :param approval_matrix: The approval_matrix of this PageOfAnalysis.  # noqa: E501
        :type approval_matrix: Dict[str, Dict[str, ApprovalStatus]]
        """
        self.openapi_types = {
            'paging_token': str,
            'total_count': int,
            'items': List[AnalysisResult],
            'approval_matrix': Dict[str, Dict[str, ApprovalStatus]]
        }

        self.attribute_map = {
            'paging_token': 'paging_token',
            'total_count': 'total_count',
            'items': 'items',
            'approval_matrix': 'approval_matrix'
        }

        self._paging_token = paging_token
        self._total_count = total_count
        self._items = items
        self._approval_matrix = approval_matrix

    @classmethod
    def from_dict(cls, dikt) -> 'PageOfAnalysis':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The page-of-analysis of this PageOfAnalysis.  # noqa: E501
        :rtype: PageOfAnalysis
        """
        return util.deserialize_model(dikt, cls)

    @property
    def paging_token(self):
        """Gets the paging_token of this PageOfAnalysis.


        :return: The paging_token of this PageOfAnalysis.
        :rtype: str
        """
        return self._paging_token

    @paging_token.setter
    def paging_token(self, paging_token):
        """Sets the paging_token of this PageOfAnalysis.


        :param paging_token: The paging_token of this PageOfAnalysis.
        :type paging_token: str
        """
        if paging_token is None:
            raise ValueError("Invalid value for `paging_token`, must not be `None`")  # noqa: E501

        self._paging_token = paging_token

    @property
    def total_count(self):
        """Gets the total_count of this PageOfAnalysis.


        :return: The total_count of this PageOfAnalysis.
        :rtype: int
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count):
        """Sets the total_count of this PageOfAnalysis.


        :param total_count: The total_count of this PageOfAnalysis.
        :type total_count: int
        """
        if total_count is None:
            raise ValueError("Invalid value for `total_count`, must not be `None`")  # noqa: E501

        self._total_count = total_count

    @property
    def items(self):
        """Gets the items of this PageOfAnalysis.


        :return: The items of this PageOfAnalysis.
        :rtype: List[AnalysisResult]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this PageOfAnalysis.


        :param items: The items of this PageOfAnalysis.
        :type items: List[AnalysisResult]
        """
        if items is None:
            raise ValueError("Invalid value for `items`, must not be `None`")  # noqa: E501

        self._items = items

    @property
    def approval_matrix(self):
        """Gets the approval_matrix of this PageOfAnalysis.


        :return: The approval_matrix of this PageOfAnalysis.
        :rtype: Dict[str, Dict[str, ApprovalStatus]]
        """
        return self._approval_matrix

    @approval_matrix.setter
    def approval_matrix(self, approval_matrix):
        """Sets the approval_matrix of this PageOfAnalysis.


        :param approval_matrix: The approval_matrix of this PageOfAnalysis.
        :type approval_matrix: Dict[str, Dict[str, ApprovalStatus]]
        """
        if approval_matrix is None:
            raise ValueError("Invalid value for `approval_matrix`, must not be `None`")  # noqa: E501

        self._approval_matrix = approval_matrix
