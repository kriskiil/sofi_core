# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from web.src.SAP.generated.models.base_model_ import Model
from web.src.SAP.generated.models.microreact_project import MicroreactProject
from web.src.SAP.generated import util

from web.src.SAP.generated.models.microreact_project import MicroreactProject  # noqa: E501

class UpdateMicroreactReference(Model):



    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
    Do not edit the class manually.
    """

    def __init__(self, id=None, microreact=None):  # noqa: E501
        """UpdateMicroreactReference - a model defined in OpenAPI

        :param id: The id of this UpdateMicroreactReference.  # noqa: E501
        :type id: str
        :param microreact: The microreact of this UpdateMicroreactReference.  # noqa: E501
        :type microreact: MicroreactProject
        """
        self.openapi_types = {
            'id': str,
            'microreact': MicroreactProject,
        }

        self.attribute_map = {
            'id': 'id',
            'microreact': 'microreact',
        }

        self._id = id
        self._microreact = microreact

    @classmethod
    def from_dict(cls, dikt):
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UpdateMicroreactReference of this UpdateMicroreactReference.  # noqa: E501
        :rtype: UpdateMicroreactReference
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this UpdateMicroreactReference.


        :return: The id of this UpdateMicroreactReference.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UpdateMicroreactReference.


        :param id: The id of this UpdateMicroreactReference.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def microreact(self):
        """Gets the microreact of this UpdateMicroreactReference.


        :return: The microreact of this UpdateMicroreactReference.
        :rtype: MicroreactProject
        """
        return self._microreact

    @microreact.setter
    def microreact(self, microreact):
        """Sets the microreact of this UpdateMicroreactReference.


        :param microreact: The microreact of this UpdateMicroreactReference.
        :type microreact: MicroreactProject
        """
        if microreact is None:
            raise ValueError("Invalid value for `microreact`, must not be `None`")  # noqa: E501

        self._microreact = microreact
