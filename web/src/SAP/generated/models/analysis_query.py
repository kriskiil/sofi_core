# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from .base_model_ import Model

from .. import util

class AnalysisQuery(Model):



    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
    Do not edit the class manually.
    """

    def __init__(self, paging_token=None, page_size=100, max_results=128, query_expression=None):  # noqa: E501
        """AnalysisQuery - a model defined in OpenAPI

        :param paging_token: The paging_token of this AnalysisQuery.  # noqa: E501
        :type paging_token: bytearray
        :param page_size: The page_size of this AnalysisQuery.  # noqa: E501
        :type page_size: int
        :param max_results: The max_results of this AnalysisQuery.  # noqa: E501
        :type max_results: int
        :param query_expression: The query_expression of this AnalysisQuery.  # noqa: E501
        :type query_expression: QueryExpression
        """
        self.openapi_types = {
            'paging_token': bytearray,
            'page_size': int,
            'max_results': int,
            'query_expression': QueryExpression
        }

        self.attribute_map = {
            'paging_token': 'paging_token',
            'page_size': 'page_size',
            'max_results': 'max_results',
            'query_expression': 'query_expression'
        }

        self._paging_token = paging_token
        self._page_size = page_size
        self._max_results = max_results
        self._query_expression = query_expression

    @classmethod
    def from_dict(cls, dikt):
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The analysis-query of this AnalysisQuery.  # noqa: E501
        :rtype: AnalysisQuery
        """
        return util.deserialize_model(dikt, cls)

    @property
    def paging_token(self):
        """Gets the paging_token of this AnalysisQuery.

        opaque token to supply to get the next page of isolates  # noqa: E501

        :return: The paging_token of this AnalysisQuery.
        :rtype: bytearray
        """
        return self._paging_token

    @paging_token.setter
    def paging_token(self, paging_token):
        """Sets the paging_token of this AnalysisQuery.

        opaque token to supply to get the next page of isolates  # noqa: E501

        :param paging_token: The paging_token of this AnalysisQuery.
        :type paging_token: bytearray
        """

        self._paging_token = paging_token

    @property
    def page_size(self):
        """Gets the page_size of this AnalysisQuery.


        :return: The page_size of this AnalysisQuery.
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this AnalysisQuery.


        :param page_size: The page_size of this AnalysisQuery.
        :type page_size: int
        """

        self._page_size = page_size

    @property
    def max_results(self):
        """Gets the max_results of this AnalysisQuery.


        :return: The max_results of this AnalysisQuery.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this AnalysisQuery.


        :param max_results: The max_results of this AnalysisQuery.
        :type max_results: int
        """

        self._max_results = max_results

    @property
    def query_expression(self):
        """Gets the query_expression of this AnalysisQuery.


        :return: The query_expression of this AnalysisQuery.
        :rtype: QueryExpression
        """
        return self._query_expression

    @query_expression.setter
    def query_expression(self, query_expression):
        """Sets the query_expression of this AnalysisQuery.


        :param query_expression: The query_expression of this AnalysisQuery.
        :type query_expression: QueryExpression
        """

        self._query_expression = query_expression
