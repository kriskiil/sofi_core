# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from web.src.SAP.generated.models.base_model_ import Model
from web.src.SAP.generated.models.query_expression import QueryExpression
from web.src.SAP.generated import util

from web.src.SAP.generated.models.query_expression import QueryExpression  # noqa: E501

class AnalysisQuery(Model):



    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
    Do not edit the class manually.
    """

    def __init__(self, paging_token=None, page_size=100, expression=None):  # noqa: E501
        """AnalysisQuery - a model defined in OpenAPI

        :param paging_token: The paging_token of this AnalysisQuery.  # noqa: E501
        :type paging_token: str
        :param page_size: The page_size of this AnalysisQuery.  # noqa: E501
        :type page_size: int
        :param expression: The expression of this AnalysisQuery.  # noqa: E501
        :type expression: QueryExpression
        """
        self.openapi_types = {
            'paging_token': str,
            'page_size': int,
            'expression': QueryExpression,
        }

        self.attribute_map = {
            'paging_token': 'paging_token',
            'page_size': 'page_size',
            'expression': 'expression',
        }

        self._paging_token = paging_token
        self._page_size = page_size
        self._expression = expression

    @classmethod
    def from_dict(cls, dikt):
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AnalysisQuery of this AnalysisQuery.  # noqa: E501
        :rtype: AnalysisQuery
        """
        return util.deserialize_model(dikt, cls)

    @property
    def paging_token(self):
        """Gets the paging_token of this AnalysisQuery.

        opaque token to supply to get the next page of isolates  # noqa: E501

        :return: The paging_token of this AnalysisQuery.
        :rtype: str
        """
        return self._paging_token

    @paging_token.setter
    def paging_token(self, paging_token):
        """Sets the paging_token of this AnalysisQuery.

        opaque token to supply to get the next page of isolates  # noqa: E501

        :param paging_token: The paging_token of this AnalysisQuery.
        :type paging_token: str
        """

        self._paging_token = paging_token

    @property
    def page_size(self):
        """Gets the page_size of this AnalysisQuery.


        :return: The page_size of this AnalysisQuery.
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this AnalysisQuery.


        :param page_size: The page_size of this AnalysisQuery.
        :type page_size: int
        """

        self._page_size = page_size

    @property
    def expression(self):
        """Gets the expression of this AnalysisQuery.


        :return: The expression of this AnalysisQuery.
        :rtype: QueryExpression
        """
        return self._expression

    @expression.setter
    def expression(self, expression):
        """Sets the expression of this AnalysisQuery.


        :param expression: The expression of this AnalysisQuery.
        :type expression: QueryExpression
        """

        self._expression = expression
