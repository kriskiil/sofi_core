# coding: utf-8

"""
    lims

    LIMS web service  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


import inspect
import pprint
import re  # noqa: F401
import six

from web.src.services.lims.openapi.configuration import Configuration


class DataFieldName(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    SPECIES = "Species"
    SUBSPECIES = "Subspecies"
    SEROTYPE = "Serotype"
    ST = "ST"
    PATHOTYPE = "Pathotype"
    ADH_SIONSGENER = "Adh√¶sionsgener"
    TOXINGENER = "Toxingener"
    VIRULENSGENER = "virulensgener"
    AMRGENER = "AMRgener"
    RESFINDER_VERSION = "ResFinder version"
    DATO_SEKVENSANALYSE = "dato sekvensanalyse"
    RUNID = "RunId"
    SEKVENSID = "sekvensID"
    AMR_AMI = "amr_ami"
    AMR_AMP = "amr_amp"
    AMR_AZI = "amr_azi"
    AMR_FEP = "amr_fep"
    AMR_FOT = "amr_fot"
    AMR_F_C = "amr_f_c"
    AMR_FOX = "amr_fox"
    AMR_TAZ = "amr_taz"
    AMR_T_C = "amr_t_c"
    AMR_CHL = "amr_chl"
    AMR_CIP = "amr_cip"
    AMR_CLI = "amr_cli"
    AMR_COL = "amr_col"
    AMR_DAP = "amr_dap"
    AMR_ETP = "amr_etp"
    AMR_ERY = "amr_ery"
    AMR_FUS = "amr_fus"
    AMR_GEN = "amr_gen"
    AMR_IMI = "amr_imi"
    AMR_KAN = "amr_kan"
    AMR_LZD = "amr_lzd"
    AMR_MERO = "amr_mero"
    AMR_MUP = "amr_mup"
    AMR_NAL = "amr_nal"
    AMR_PEN = "amr_pen"
    AMR_SYN = "amr_syn"
    AMR_RIF = "amr_rif"
    AMR_STR = "amr_str"
    AMR_SUL = "amr_sul"
    AMR_TEI = "amr_tei"
    AMR_TRM = "amr_trm"
    AMR_TET = "amr_tet"
    AMR_TIA = "amr_tia"
    AMR_TGC = "amr_tgc"
    AMR_TMP = "amr_tmp"
    AMR_VAN = "amr_van"

    allowable_values = [SPECIES, SUBSPECIES, SEROTYPE, ST, PATHOTYPE, ADH_SIONSGENER, TOXINGENER, VIRULENSGENER, AMRGENER, RESFINDER_VERSION, DATO_SEKVENSANALYSE, RUNID, SEKVENSID, AMR_AMI, AMR_AMP, AMR_AZI, AMR_FEP, AMR_FOT, AMR_F_C, AMR_FOX, AMR_TAZ, AMR_T_C, AMR_CHL, AMR_CIP, AMR_CLI, AMR_COL, AMR_DAP, AMR_ETP, AMR_ERY, AMR_FUS, AMR_GEN, AMR_IMI, AMR_KAN, AMR_LZD, AMR_MERO, AMR_MUP, AMR_NAL, AMR_PEN, AMR_SYN, AMR_RIF, AMR_STR, AMR_SUL, AMR_TEI, AMR_TRM, AMR_TET, AMR_TIA, AMR_TGC, AMR_TMP, AMR_VAN]  # noqa: E501

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
    }

    attribute_map = {
    }

    def __init__(self, local_vars_configuration=None):  # noqa: E501
        """DataFieldName - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration
        self.discriminator = None

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = inspect.getargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataFieldName):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DataFieldName):
            return True

        return self.to_dict() != other.to_dict()
