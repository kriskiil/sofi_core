# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from .base_model_ import Model
import re
from .. import util

import re  # noqa: E501

class Analysis(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, analysis_id=None, isolate_id=None, test_timestamp=None, date_received=None, resfinder_version=None, serum_type=None, agent=None, species=None, organization=None, project=None, approved=None):  # noqa: E501
        """Analysis - a model defined in OpenAPI

        :param analysis_id: The analysis_id of this Analysis.  # noqa: E501
        :type analysis_id: str
        :param isolate_id: The isolate_id of this Analysis.  # noqa: E501
        :type isolate_id: str
        :param test_timestamp: The test_timestamp of this Analysis.  # noqa: E501
        :type test_timestamp: datetime
        :param date_received: The date_received of this Analysis.  # noqa: E501
        :type date_received: date
        :param resfinder_version: The resfinder_version of this Analysis.  # noqa: E501
        :type resfinder_version: str
        :param serum_type: The serum_type of this Analysis.  # noqa: E501
        :type serum_type: str
        :param agent: The agent of this Analysis.  # noqa: E501
        :type agent: str
        :param species: The species of this Analysis.  # noqa: E501
        :type species: str
        :param organization: The organization of this Analysis.  # noqa: E501
        :type organization: str
        :param project: The project of this Analysis.  # noqa: E501
        :type project: str
        :param approved: The approved of this Analysis.  # noqa: E501
        :type approved: bool
        """
        self.openapi_types = {
            'analysis_id': str,
            'isolate_id': str,
            'test_timestamp': datetime,
            'date_received': date,
            'resfinder_version': str,
            'serum_type': str,
            'agent': str,
            'species': str,
            'organization': str,
            'project': str,
            'approved': bool
        }

        self.attribute_map = {
            'analysis_id': 'analysisId',
            'isolate_id': 'isolateId',
            'test_timestamp': 'testTimestamp',
            'date_received': 'dateReceived',
            'resfinder_version': 'resfinderVersion',
            'serum_type': 'serumType',
            'agent': 'agent',
            'species': 'species',
            'organization': 'organization',
            'project': 'project',
            'approved': 'approved'
        }

        self._analysis_id = analysis_id
        self._isolate_id = isolate_id
        self._test_timestamp = test_timestamp
        self._date_received = date_received
        self._resfinder_version = resfinder_version
        self._serum_type = serum_type
        self._agent = agent
        self._species = species
        self._organization = organization
        self._project = project
        self._approved = approved

    @classmethod
    def from_dict(cls, dikt) -> 'Analysis':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Analysis of this Analysis.  # noqa: E501
        :rtype: Analysis
        """
        return util.deserialize_model(dikt, cls)

    @property
    def analysis_id(self):
        """Gets the analysis_id of this Analysis.


        :return: The analysis_id of this Analysis.
        :rtype: str
        """
        return self._analysis_id

    @analysis_id.setter
    def analysis_id(self, analysis_id):
        """Sets the analysis_id of this Analysis.


        :param analysis_id: The analysis_id of this Analysis.
        :type analysis_id: str
        """
        if analysis_id is None:
            raise ValueError("Invalid value for `analysis_id`, must not be `None`")  # noqa: E501

        self._analysis_id = analysis_id

    @property
    def isolate_id(self):
        """Gets the isolate_id of this Analysis.


        :return: The isolate_id of this Analysis.
        :rtype: str
        """
        return self._isolate_id

    @isolate_id.setter
    def isolate_id(self, isolate_id):
        """Sets the isolate_id of this Analysis.


        :param isolate_id: The isolate_id of this Analysis.
        :type isolate_id: str
        """
        if isolate_id is None:
            raise ValueError("Invalid value for `isolate_id`, must not be `None`")  # noqa: E501
        if isolate_id is not None and not re.search(r'^\d{4}_\d{2}_[A-Z0-9]{3}$', isolate_id):  # noqa: E501
            raise ValueError("Invalid value for `isolate_id`, must be a follow pattern or equal to `/^\d{4}_\d{2}_[A-Z0-9]{3}$/`")  # noqa: E501

        self._isolate_id = isolate_id

    @property
    def test_timestamp(self):
        """Gets the test_timestamp of this Analysis.


        :return: The test_timestamp of this Analysis.
        :rtype: datetime
        """
        return self._test_timestamp

    @test_timestamp.setter
    def test_timestamp(self, test_timestamp):
        """Sets the test_timestamp of this Analysis.


        :param test_timestamp: The test_timestamp of this Analysis.
        :type test_timestamp: datetime
        """
        if test_timestamp is None:
            raise ValueError("Invalid value for `test_timestamp`, must not be `None`")  # noqa: E501

        self._test_timestamp = test_timestamp

    @property
    def date_received(self):
        """Gets the date_received of this Analysis.


        :return: The date_received of this Analysis.
        :rtype: date
        """
        return self._date_received

    @date_received.setter
    def date_received(self, date_received):
        """Sets the date_received of this Analysis.


        :param date_received: The date_received of this Analysis.
        :type date_received: date
        """
        if date_received is None:
            raise ValueError("Invalid value for `date_received`, must not be `None`")  # noqa: E501

        self._date_received = date_received

    @property
    def resfinder_version(self):
        """Gets the resfinder_version of this Analysis.


        :return: The resfinder_version of this Analysis.
        :rtype: str
        """
        return self._resfinder_version

    @resfinder_version.setter
    def resfinder_version(self, resfinder_version):
        """Sets the resfinder_version of this Analysis.


        :param resfinder_version: The resfinder_version of this Analysis.
        :type resfinder_version: str
        """
        if resfinder_version is not None and not re.search(r'^\d*\.\d*$', resfinder_version):  # noqa: E501
            raise ValueError("Invalid value for `resfinder_version`, must be a follow pattern or equal to `/^\d*\.\d*$/`")  # noqa: E501

        self._resfinder_version = resfinder_version

    @property
    def serum_type(self):
        """Gets the serum_type of this Analysis.


        :return: The serum_type of this Analysis.
        :rtype: str
        """
        return self._serum_type

    @serum_type.setter
    def serum_type(self, serum_type):
        """Sets the serum_type of this Analysis.


        :param serum_type: The serum_type of this Analysis.
        :type serum_type: str
        """
        if serum_type is not None and not re.search(r'^[A-Z]{8}$', serum_type):  # noqa: E501
            raise ValueError("Invalid value for `serum_type`, must be a follow pattern or equal to `/^[A-Z]{8}$/`")  # noqa: E501

        self._serum_type = serum_type

    @property
    def agent(self):
        """Gets the agent of this Analysis.


        :return: The agent of this Analysis.
        :rtype: str
        """
        return self._agent

    @agent.setter
    def agent(self, agent):
        """Sets the agent of this Analysis.


        :param agent: The agent of this Analysis.
        :type agent: str
        """
        allowed_values = ["e.coli", "salmonella"]  # noqa: E501
        if agent not in allowed_values:
            raise ValueError(
                "Invalid value for `agent` ({0}), must be one of {1}"
                .format(agent, allowed_values)
            )

        self._agent = agent

    @property
    def species(self):
        """Gets the species of this Analysis.


        :return: The species of this Analysis.
        :rtype: str
        """
        return self._species

    @species.setter
    def species(self, species):
        """Sets the species of this Analysis.


        :param species: The species of this Analysis.
        :type species: str
        """
        allowed_values = ["rat", "human", "pig", "dog"]  # noqa: E501
        if species not in allowed_values:
            raise ValueError(
                "Invalid value for `species` ({0}), must be one of {1}"
                .format(species, allowed_values)
            )

        self._species = species

    @property
    def organization(self):
        """Gets the organization of this Analysis.


        :return: The organization of this Analysis.
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this Analysis.


        :param organization: The organization of this Analysis.
        :type organization: str
        """
        allowed_values = ["FVST", "SSI"]  # noqa: E501
        if organization not in allowed_values:
            raise ValueError(
                "Invalid value for `organization` ({0}), must be one of {1}"
                .format(organization, allowed_values)
            )

        self._organization = organization

    @property
    def project(self):
        """Gets the project of this Analysis.


        :return: The project of this Analysis.
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this Analysis.


        :param project: The project of this Analysis.
        :type project: str
        """

        self._project = project

    @property
    def approved(self):
        """Gets the approved of this Analysis.


        :return: The approved of this Analysis.
        :rtype: bool
        """
        return self._approved

    @approved.setter
    def approved(self, approved):
        """Sets the approved of this Analysis.


        :param approved: The approved of this Analysis.
        :type approved: bool
        """
        if approved is None:
            raise ValueError("Invalid value for `approved`, must not be `None`")  # noqa: E501

        self._approved = approved
