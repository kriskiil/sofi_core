// tslint:disable
/**
 * SOFI
 * SOFI Sekvensanalyseplatform
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../runtime';

export interface GetSampleByIdRequest {
    sequenceId: string;
}


/**
 * Get an individual sample by id
 */
function getSampleByIdRaw<T>(requestParameters: GetSampleByIdRequest, requestConfig: runtime.TypedQueryConfig<T, { [key: string]: object; }> = {}): QueryConfig<T> {
    if (requestParameters.sequenceId === null || requestParameters.sequenceId === undefined) {
        throw new runtime.RequiredError('sequenceId','Required parameter requestParameters.sequenceId was null or undefined when calling getSampleById.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['bearer'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/samples/{sequence_id}`.replace(`{${"sequence_id"}}`, encodeURIComponent(String(requestParameters.sequenceId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Get an individual sample by id
*/
export function getSampleById<T>(requestParameters: GetSampleByIdRequest, requestConfig?: runtime.TypedQueryConfig<T, { [key: string]: object; }>): QueryConfig<T> {
    return getSampleByIdRaw(requestParameters, requestConfig);
}

