// tslint:disable
/**
 * SAP
 * Sekvensanalyseplatform
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
  HttpMethods,
  QueryConfig,
  ResponseBody,
  ResponseText,
} from "redux-query";
import * as runtime from "../runtime";

import {
  Column,
  ColumnFromJSON,
  ColumnToJSON,
  PageOfAnalysis,
  PageOfAnalysisFromJSON,
  PageOfAnalysisToJSON,
} from "../models";

export interface GetAnalysisRequest {
  pagingToken?: string;
  pageSize?: number;
}

/**
 * Page through all the analysis in the system (WIP)
 */
function getAnalysisRaw<T>(
  requestParameters: GetAnalysisRequest,
  requestConfig: runtime.TypedQueryConfig<T, PageOfAnalysis> = {}
): QueryConfig<T> {
  let queryParameters = null;

  queryParameters = {};

  if (requestParameters.pagingToken !== undefined) {
    queryParameters["paging_token"] = requestParameters.pagingToken;
  }

  if (requestParameters.pageSize !== undefined) {
    queryParameters["page_size"] = requestParameters.pageSize;
  }

  const headerParameters = {};

  const { meta = {} } = requestConfig;

  const config: QueryConfig<T> = {
    url: `/analysis`,
    meta,
    update: requestConfig.update,
    queryKey: requestConfig.queryKey,
    optimisticUpdate: requestConfig.optimisticUpdate,
    force: requestConfig.force,
    rollback: requestConfig.rollback,
    options: {
      method: "GET",
      headers: headerParameters,
    },
    body: queryParameters,
  };

  const { transform: requestTransform } = requestConfig;
  if (requestTransform) {
    config.transform = (body: ResponseBody, text: ResponseBody) =>
      requestTransform(PageOfAnalysisFromJSON(body), text);
  }

  return config;
}

/**
 * Page through all the analysis in the system (WIP)
 */
export function getAnalysis<T>(
  requestParameters: GetAnalysisRequest,
  requestConfig?: runtime.TypedQueryConfig<T, PageOfAnalysis>
): QueryConfig<T> {
  return getAnalysisRaw(requestParameters, requestConfig);
}

/**
 * Get column metadata, scoped to authenticated user
 */
function getColumnsRaw<T>(
  requestConfig: runtime.TypedQueryConfig<T, Array<Column>> = {}
): QueryConfig<T> {
  let queryParameters = null;

  const headerParameters = {};

  const { meta = {} } = requestConfig;

  const config: QueryConfig<T> = {
    url: `/analysis/columns`,
    meta,
    update: requestConfig.update,
    queryKey: requestConfig.queryKey,
    optimisticUpdate: requestConfig.optimisticUpdate,
    force: requestConfig.force,
    rollback: requestConfig.rollback,
    options: {
      method: "GET",
      headers: headerParameters,
    },
    body: queryParameters,
  };

  const { transform: requestTransform } = requestConfig;
  if (requestTransform) {
    config.transform = (body: ResponseBody, text: ResponseBody) =>
      requestTransform(body.map(ColumnFromJSON), text);
  }

  return config;
}

/**
 * Get column metadata, scoped to authenticated user
 */
export function getColumns<T>(
  requestConfig?: runtime.TypedQueryConfig<T, Array<Column>>
): QueryConfig<T> {
  return getColumnsRaw(requestConfig);
}
