version: '3.4'
services:
  sap_api:
    environment:
    # don't litter host with pyc files; we always want latest state from file
      - PYTHONDONTWRITEBYTECODE=1
    user: ${CURRENT_UID}
    volumes:
    # Change path before : to point to local web.
      - ./web:/app/web:ro
    depends_on:
      - "bifrost_db"

  sap_broker_queue:
    environment:
      - TBR_API_URL=http://tbr_integration
      - LIMS_API_URL=http://lims_integration
    depends_on:
      - "bifrost_db"
      - "sap_api"

  bifrost_listener:
    depends_on:
      - "bifrost_db"

  sap_app:
    build:
      context: ./app
      dockerfile: Dockerfile.dev
    user: ${CURRENT_UID}
    ports:
      - "3333:3333"
    environment:
      - NODE_ENV=development
    volumes:
      - ./app:/app:rw
    stdin_open: true

  mocks:
    image: caddy
    volumes:
      - ./openapi_specs/Caddyfile:/etc/caddy/Caddyfile
    ports:
      - '4099:4099'
    depends_on:
      - lims_mock
      - sap_mock

  lims_mock:
    image: stoplight/prism:latest
    command: mock /openapi_specs/lims.v1.yaml -h 0.0.0.0 -p 4021
    volumes:
      - ./openapi_specs:/openapi_specs

  sap_mock:
    image: stoplight/prism:latest
    command: mock /openapi_specs/SAP/SAP.yaml -h 0.0.0.0 -p 4011 -d
    volumes:
      - ./openapi_specs:/openapi_specs
  
  tbr_integration:
    container_name: tbr_integration
    build: ./sap_tbr_integration
    environment:
      ASPNETCORE_ENVIRONMENT: Development
    ports:
      - '5000:80'
      - '5001:443'

  bifrost_db:
    image: mongo:4.4.2
    command: --replSet rs0
    container_name: bifrost_db
    restart: always
    user: ${CURRENT_UID}
    environment:
      MONGO_INITDB_DATABASE: bifrost_test
    volumes:
        - ./bifrost/bifrost_db/initdb.d/:/docker-entrypoint-initdb.d/
        - ./bifrost/bifrost_db/data/db/:/data/db/
        - ./bifrost/bifrost_db/data/log/:/var/log/mongodb/
    ports:
        - "27017:27017"
    expose:
      - 27017
    extra_hosts:
      bifrost_db: 127.0.0.1
    healthcheck:
      # causes replicaset to initialize as a side effect
      test: "test $$(echo \"rs.initiate{ _id: 'rs0', version: 1, members: [{ _id: 0, host : 'bifrost_db:27017' }]}).ok || rs.status().ok\" | mongo --quiet) -eq 1"
      interval: 60s
      start_period: 15s

  postgresd:
    environment:
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
        - ./auth/pg:/var/lib/postgresql/data/

  hydra:
    environment:
      SOFI_CLIENT_ID: ${SOFI_CLIENT_ID}
      SOFI_HOSTNAME: ${SOFI_HOSTNAME}
      SOFI_PORT: ${SOFI_PORT}
    healthcheck:
      # Ensure our public client application is created
      test: "/healthcheck-runner.sh"
      interval: 30s 
      start_period: 30s
      retries: 10
    volumes:
      - ./auth/config/hydra/healthcheck-runner.sh:/healthcheck-runner.sh:ro
      - ./auth/config/hydra/healthcheck.sh:/healthcheck.sh:ro
      - ./auth/config/hydra/init.sh:/init.sh:ro

  kratos_init_sidecar:
    build: ./auth/config
    network_mode: "host"
    depends_on:
      - kratos-migrate
    environment:
      SOFI_HOSTNAME: ${SOFI_HOSTNAME}
      SOFI_PORT: ${SOFI_PORT}
    command: ["sh","-c","/init-dev-users.sh"]
    volumes:
      - ./auth/config/kratos/sidecar/init-dev-users.sh:/init-dev-users.sh:ro
    restart: on-failure

  kratos:
    command:
      serve -c /etc/config/kratos/.kratos.yml --dev

  # Allows for testing email-based self-service flows in kratos (forgot password, account verification, etc)
  mailslurper:
    image: oryd/mailslurper:latest-smtps
    ports:
      - "4436:4436"
      - "4437:4437"
